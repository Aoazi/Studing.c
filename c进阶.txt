整形有符号在内存中有原反补码：正数原反补相同负数不同
原码到反码将原码的符号位不变其他位依次按位取反就可以得到了
补码是反码加一得到补码
大端模式 数据的低位存在内存的高地址为而高位保存在内存的的低地址位
小端模式 数据的低位存在内存的低地址为而高位保存在内存的的高地址位


浮点型在内存中的存储
9.0
1001
1001.0
(-1)^0*1.001*2^3
(-1)^s*M*2^E  //
0 00000000 0000000000000000000001001
s    E                 M
E存在内存中是通过加上127 double是加1023；
M存在内存中只存小数点后面的数字比如001；
E全为0：M不在加上第一位的一，E直接等于1-127为真是值接近于很小的数字
E全为1：M全为0以及接近于0的很小数字

char
#define CHAR_BIT      8
#define SCHAR_MIN   (-128)
#define SCHAR_MAX     127
#define UCHAR_MAX     0xff
范围 -128到127
short
#define MB_LEN_MAX    5
#define SHRT_MIN    (-32768)
#define SHRT_MAX      32767
等等



指针进阶（很重要）
1.字符指针
int main()
{
	char arr1[] = "asdfl";
	char arr2[] = "asdfl";
	char* p1 = "abcdef";
	char* p2 = "abcdef";
	if (p1 == p2)
	{
		printf("呵呵\n");

	}
	else
	{
		printf("haha\n");
	}
	return 0;
}
2.指针数组
是数组
int main()
{
	int arr[] = { 0 };//整形数组
	char ch[5] = { 0 };//zifushuzu
	int* parr[4];//存放整形指针的数组 — 指针数组
	char* chc[5];//存放字符指针的数组  - 指针数组
	return 0;
}

int main()
{
	int arr1[]={1,2,3,4,5 };
	int arr2[] = { 1,2,3,4,5 };
	int* parr[] = { arr1,arr2 };
	int i = 0;
	for (i = 0; i < 2;i++)
	{
		int j = 0;
		for (j = 0; j < 5; j++)
		{
			printf("%d ", *(parr[i] + j));
		}
		printf("\n");
	}
	return 0;
}

3.数组指针 
是指针用来存放数组的指针
int main()
{
	//int* p = NULL;//整形指针 - 指向整形的指针 - 可以存放整形的指针
	//char* pc = NULL;//字符指针 -指向字符的指针 - 可以存放数组的指针
                     //数组的指针 - 指向数组的指针 - 存放数组的指针
	//int arr[10] = {0};//arr - 首元素地址 //&arr数组的地址 //&arr[0]首元素的地址
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int(*p)[10] = &arr;//数组的地址要存起来
	//上面的p就是数组指针
	return 0;
}





int mian()
{
	char* arr[5];
	char* (*pa)[5] = &arr;
	//char*：pa指向的数组的元素类型
	//pa旁边的*：说明pa是指针
	// pa：是指针变量的名字
	//[5]：是pa指向的5个元素的
	return 0;
}






void print2(int (*p)[5], int x, int y)
{
	int i = 0;
	for (i = 0; i < x; i++)
	{
		int j = 0;
		for (j = 0; j < y; j++)
		{ 
			printf("%d ", * (*(p + i) + j));//相等
			printf("%d ", (*(p + i))[j]);//相等
		}
		printf("\n");
	}

}
int main()
{
	int arr[3][5] = { {1,2,3,4,5},{2,2,3,4,5},{1,2,3,4,5} };
	print1(arr, 3, 5);
	print2(arr, 3, 5);
	return 0;
}



int main()
{
	int arr[5];//5个元素的整形数组
	int* parr[10];//parr是一个数组，数组有10个元素，每个元素的类型是int*，parr是指针数组
	int(*parr2)[10];//parr2是一个指针，该指针指向了一个数组，数组有10个元素，每个元素的类型是int 是数组指针
	int(*parr3[10])[5];//parr3是一个数组，该数组有10个元素每个元素是一个指针 该数组指针，指向的数组有5个元素，每个元素是int
	return 0;
}

一维数组传参
以下都可以
void test(int arr[])
{}
void test(int arr[10])
{}
void test(int *arr)
{}
void test2(int* arr[20])
{}
void test2(int* *arr)
{}
int main()
{
	int arr[10] = { 0 };
	int* arr2[20] = { 0 };
	test(arr);
	test2(arr2);

}
二维数组传参
void tset(int arr[3][5])
{}
void tset(int arr[][5])//二维数组行可以省略列不行
{}
void test(int (*arr)[5])
{}
int main()
{
	int arr[3][5] = { 0 };
	test(arr);//二维数组传参
	return 0;
}
二级指针传参





函数指针
int add(int a, int b)
{
	int z = 0;
	z = a + b;
	return z;
}
int main()
{
	int a = 10;
	int b = 12;
	//&函数名和函数名都是函数的地址
	add(a, b);
	printf("%p\n", &add);
	printf("%p\n", add);
	int (*p)(int, int) = add;
	printf("%d", (*p)(2, 3));
	return 0;
}




void Print(char* str)
{
	printf("%s\n", str);
}
int main()
{
	void (*p)(char*) = Print;
	(*p)("hello");
	return 0;
}









函数指针数组
int add(int x, int y)
{
	return x + y;
}
int Sub(int x, int y)
{
	return x - y;
}
int Mul(int x, int y)
{
	return x * y;
}
int Div(int x, int y)
{
	return x / y;
}
int main()
{
	//需要一个数组，这个数组可以存放4个函数的地址 - 函数指针的数组
	int (*pa)(int, int) = add;//Sub/Mul/Div
	int (*parr[4])(int, int) = { add,Sub,Mul,Div };
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		printf("%d\n", parr[i](2, 3));//5 -1 6 0
	}
	return 0;
}
