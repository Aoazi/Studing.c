#define _CRT_SECURE_NO_WARNINGS 1
c语言的网址  https://cplusplus.com/
算法网站leetcode
\xdd dd表示2个十六进制数字。 如：\x30 0
\ddd ddd表示1~3个八进制的数字。 如\130 x
                                                                    
  内存中有            栈区：局部变量 函数的形式参数 函数调用也开辟空间 
                                                     默认使用低地址空间 先使用高地址处的空间 在使用低地址的空间
       		           数组随着下标的增长地址由低到高变化
                    堆 区：动态内存分配 malloc/free   realloc   calloc
                    静态区：全局变量  静态变量                                                                            

0 表示假 非零就是真

整型和无符号数比较大小会把整星变成无符号数




算数操作符
+ - * / %

>>右移操作符移动的是二进制为
1（算术右移：右边丢弃，左边补原符号位）
2（逻辑右移：右边丢弃，左边补0）
整数的二进制有：原码反码补码
比如a=-1
原码：100000000000000000000001
反码：111111111111111111111110
补码=反码加一：11111111111111111111111111111111
（第一位是符号位负数为1）
<<左移操作符
左边丢弃，右边补0

&含义按位与两个都为真是真
比如a=3，b=5，c=a&b
a:011
b:101 
c:001
c=1

|按位或
比如a=3，b=5，c=a|b
a:011
b:101
c:111    
c=7

^按位异或
对应二进制为相同为0，相异为1


复合赋值操作符
+= -= |= &= ^= &= >>= <<= %= *=
a=10;
a=a+2;
a+=2

a=>>1;
a>>=1;

a=a&1;
a&=1;




单目操作符
! 逻辑反操作 比如a=10; !a=0;
-  负值
+ 正直
& 取地址
sizeof 操作数的类型长度（以字节为单位）
~ 对一个数的二进制按位取反 
--： 前置--(先使用后--) 后置--（先--后使用）
++：前置++（先使用后++）后置++（先++后使用）
* 间接访问操作符（解引用操作符）
（类型）强制类型转换


关系操作符 
>
>=
<
<=
!= 用于测试不相等
== 用于测试相等

逻辑操作符

&&  逻辑与 并且的意思有一个为假就是假
||  逻辑或有一个为真就是真，都为假才假





条件操作符
exp? exp1:exp2  





逗号表达式
exp1,exp2,exp3,exp3



常见关键字
strcat（源字符串，要追加的字符串）(后面追加一个字符串)如果自己给自己追加用strncat函数但是后面要加追加个数（ste，ste，6）主动放个'\0'
模拟实现
char* My_strcat(char* dest,const char* src)
{
	char* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
	while (*dest != '\0')
	{
		dest++;
	}
	
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()
{
	char arr1[20]="qwerty";
	char arr2[] = "asdf";
	My_strcat(arr1, arr2);
	printf("%s", arr1);
	return 0;
}

strstr（找子串）返回的是地址
模拟查找字符串（KMP算法）
char* My_strstr(const char* p1,const char* p2)
{
	char* s1 = p1;
	char* cur = p1;
	char* s2 = p2;
	assert(p1 && p2);
	if (*p2 == '\0')
	{
		return p1;
	}
	while (*cur)
	{
		s1 = cur;
		s2 = p2;
		while ((*s1 != '\0') && (*s2 != '\0') && (*s1 == *s2))
		{
			s1++;
			s2++;
		}
		if (*s2 == '\0')
		{
			return cur;
		}
		else if(*s1 == '\0')
		{
			return NULL;
		}
		cur++;
	} 
	return NULL;
}
int main()
{
	char* arr = "df";
	char* arr1 = "dfg";
     char* ret=My_strstr(arr, arr1);
	 if (ret == NULL)
	{
		 printf("不存在\n");
	}
	 else
	 {
		 printf("%s\n", ret);
	 }
	return 0;

}


gets 读取一行

strcpy拷贝函数（目的地，源头）strncpy(目的地，源头，拷贝个数)
模拟函数
char* My_strcpy(char* dest,const char* src)
{
	assert(dest != NULL);
	assert(src != NULL);
	char* ret = dest;
	while (*dest++ = *src++)
	{
		;
	}
	return ret;
}
int main()
{
	char arr1[]="qwerty";
	char arr2[] = "asdf";
	My_strcpy(arr1, arr2);
	printf("%s", arr1);
	return 0;
}


system("cls");  重置上一个内容


strcmp比较连个字符串是否相等
模拟实现
int My_strcmp(const char* str1, const char* str2)
{
	assert(str1 && str2);
	while (*str1 == *str2)
	{
		if (*str1 == '\0')
		{
			return 0;
		}
		str1++;
		str2++;
	}

	if (*str1 > *str2)
	{
		return 1;

	}
	else
	{
		return - 1;
	}
}
int main()
{
	char arr[] = "qwer";
	char arr1[] = "qwer";
	int ret = My_strcmp(arr,arr1);
	
	if (ret == 0)
	{
		printf("相等\n");
	}
	else
	{
		printf("不相等\n");
	}
	return 0;
}



strtok（char *str, const char * sep ）（第一个参数是字符串）(sep参数是个字符串，定义了用作分隔符的字符集合)返回是一个地址
用法
int main()
{
	char* arr = "123.123.123.123.123";
	char* p = ".";
	char arr1[1024] = " ";
	strcpy(arr1, arr);
	char* ret = NULL;
	for (ret = strtok(arr1, p); ret != NULL; ret = strtok(NULL, p))
	{
		printf("%s\n", ret);
	}
	return 0;
}
strerror(错误报告函数返回错误码所对应错误信息)char * strerror（itn errnum）;
strlen(string1,string2)相等返回0，1>2返回的值大于0，1<2,返回的值小于0；比较字符串长度


函数	如果它的参数符合下列条件就返回真
iscntrl	任何控制字符
isspace	空白字符：空格‘ ’，换页‘\f’，换行'\n'，回车'\r'，制表符'\t'，或垂直制表符'\v'
isdigit	十进制数字0~9
isxdigit	十六进制数字，包括所有十进制数字，小写字母a~f,大写字母A~F
islower	小写字母a~z
isupper	大写字母A~Z
isalpha	字母a~z或A~Z
isalnum	字母或数字a~z，A~Z或0~9
ispunct	标点符号，任何不属于数字或字母的图像字符（可打印符号）
isgraph	任何图像字符
isprint	任何可打印字符，包括图像字符和空白字符

内存函数
memcpy 拷贝函数 void * memcpy(void * destination,const void * source,size_t num);
模拟实现
void* my(void *dest ,const void* str,size_t num )
{
	assert(dest && str);
	while (num--)
	{
		*(char*)dest = *(char*)str;
		++(char*)dest;
		++(char*)str;
	}
}
struct S
{
	char name[20];
	int age;
};
int main()
{
	struct S t[3] = { {"张三",23},{"李四",24} };
	struct S t1[3] = {0};
	my(t1, t, sizeof(t));
	return 0;
}

memmove()//处理内存重叠拷贝的情况
memcmp(const void * ptr1,const void *ptr2,size_t num );
memse

字符转换
int tolower(int c)//转小写字母
int toupper(int c)//转大写字母

auto（自动）
break 跳出
case
char 存放字符或者存放数组
const 修饰的常变量
continue
default
do
double
else
enum 枚举关键
extern
float
for
goto
if
int
long
register 建议寄存器变量
return
short
signed（有符号的）
unsigned 
struct结构体关键字
switch/case
typedef类型重定义
getchar/putchar
void
while
static 修饰局部变量 局部变量的生命周期变长
static 修饰全局变量 改变了变量的作用域 让静态的全局变量只能在自己所在的源文件内部使用出了源文件就没法使用
static 修饰函数改变了函数的链接属性只能在源文件（正常函数有外部连链接属性）
extern 声明外部变量
#define 定义标识符常量也可以定义宏

%d  打印整形
%c  打印字符
%f  打印浮点数子 打小数
%p  以地址的形式打印
%x  打印16进制数字
%s  打印字符串
 



结构体
描述复杂对象我们自己创造
.结构体变量
->      结构体指针->成员(左边是结构体指针右边是成员)


if（语表达式）
（语句）
                                                                                          函数

函数是什么
负责完成特定任务，而且相较于其他代码，具备相对的独立性。


IO函数
字符串操作函数
字符操作函数
内容操作函数
时间/日期函数
数学函数
其他库函数


库函数
c语言提供的函数



实际参数
真实传给函数的参数
形式参数
函数名后括号中变量
（当实参传给形参的时候形参其实是实参的一份临时拷贝对形参的修改是不会改变实参的 ）
传值调用
传址调用


用自己的函数用""
用库函数是<>


递归函数和迭代的选择那个简单而且没问题用哪个。
汉诺塔问题和青蛙跳台问题以及一本书 剑指offer

数组

type_t是指数组的元素类型
arr_name数组的名字
[const_n]常量表达式数组的大小
int arr[10]={1.2.3};//不完全初始化，剩下的yuansu默认初始化为0
char arr2[5]=; 字符数组
strlen和sizeof没有什么关联
strlen是求字符串长度的只能针对字符串求长度--库函数--使用要引头文件
sizeof计算变量，数组，类型的大小，是字节----操作符
案例冒泡排序
数组名是我们首元素的地址（除了sizeof 表示整个数组的大小）（&数组名代表整个数组&数组名取出的是整个数组的地址）



指针
指针减去指针得到的是中间的元素个数。
&数组名取出的是整个数组的地址。
sizeof(数组名)计算的是整个数组的大小。
二级指针
指针数组：本质是数组存放指针int* arr[3]={&a,&b,&c};//指针数组
数组指针：本质是指针



结构体
成员描述一个学生一些数据
       名字
       年龄
       电话
       性别
或者是其他结构体。

struct结构体关键字   stu 结构体标签   struct Stu结构体类型
struct Stu
{ 
        //成员变量
       char name[20];
       short age;
       char tele[12];
       char sex[5];
}s1 ,s2, s3;//s1 ,s2, s3三个全局的结构体变量
int main()
{
       struct Stu s = { "zhangsan",20,"12312","nan" };//s是局部的变量 
    struct Stu s1 = { "lisi",200,"123323","nan" };

return 0;


}

typedef 重新定义成Stu就是类型变成Stu
typedef struct Stu
{ 
        //成员变量
       char name[20];
       short age;
       char tele[12];
       char sex[5];
}Stu；


//结构体的成员含有其他结构体
struct S
{
	int a;
	int c;
	char arr[20];
	double d;
};
struct T
{
	char cj[10];
	struct S s;
	char *p;
}; 
int main()
{
	char arr[] = "hellobite";
	struct T t = { "hehe",{100,'w',"hello word",3.14},arr};
	printf("%s", t.cj);
	printf("%s", t.s.arr);
	printf("%s", t.p);
	return 0;
}

//结构体传参要传结构体的地址
typedef struct STu
{
    //成员变量
    char name[20];
    short age;
    char tele[12];
    char sex[5];
}Stu;
void print(Stu s)
{
    printf("name:%s\n", s.name);
    printf("age: %d\n", s.age);
    printf("%s\n", s.tele);
    printf("%s\n", s.sex);
 }
void print2(Stu* p)
{
    printf("%s", p->name);
}
int main()
{
    Stu s = { "李四",23,"123123","nan" };
    print(s);
    print2(&s);
    return 0;
}

