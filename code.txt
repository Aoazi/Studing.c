交换a和b
void swape(int *a, int *b)
{
	*a = *a ^ *b;
	*b = *a ^ *b;
	*a = *a ^ *b;
}
int main()
{ 
	int a = 2;
	int b = 3;
	swape(&a,&b);
	printf("%d %d", a, b);
	return 0;
}



指针数组
int a=10;
int b=20;
int c=30;
int* arr[3]={&a,&b,&c};
int i=0;
for(i=0;i<3;i++)
{
printf("%d ",*(arr[i]));//就可以打印出来具体值。
}





逆序递归
逆序：reverse_string("abcdef")
1.a和f的交换
2逆序rever_string("bcde")
void reverse_string(char arr[])
{
	char tmp = arr[0];
	int len = strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] ='\0';
	if(strlen(arr+1)>=2)
	reverse_string(arr + 1);
	arr[len - 1] = tmp;

}
int main()
{
	char arr[] = "qwert";
	reverse_string(arr);
	printf("%s ", arr);
	return 0;
}




输入一个非负数返回组成他的数字之和
int Digitsum(unsigned int i)
{
	if (i > 9)
	{
		return Digitsum(i / 10) + i % 10;
	}
	else
	{
		return i;
	}
}
int main()
{
	unsigned int i = 0;
	scanf("%d", &i);
	int ret = Digitsum(i);
	printf("%d", ret);
	return 0;
}

n的k次方
//n*n^(k-1);




   qsort函数

typedef struct stu
{
	char name[20];
	int age;//不能限定个数
}Stu;
int cmp_age(const void* e1, const void* e2)
{
	return ((Stu*)e2)->name - ((Stu*)e1)->name;
}
void test()
{
	Stu s[4] = { {"zhangsan",90},{"lisi",50},{"wangwu",70} ,{"sun",10}};
	int se = sizeof(s) / sizeof(s[0]);
	qsort(s, se, sizeof(s[0]), cmp_age);
	

}
int main()
{
	test();
	return 0;
}





