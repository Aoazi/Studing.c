交换a和b
void swape(int *a, int *b)
{
	*a = *a ^ *b;
	*b = *a ^ *b;
	*a = *a ^ *b;
}
int main()
{ 
	int a = 2;
	int b = 3;
	swape(&a,&b);
	printf("%d %d", a, b);
	return 0;
}



指针数组
int a=10;
int b=20;
int c=30;
int* arr[3]={&a,&b,&c};
int i=0;
for(i=0;i<3;i++)
{
printf("%d ",*(arr[i]));//就可以打印出来具体值。
}





逆序递归
逆序：reverse_string("abcdef")
1.a和f的交换
2逆序rever_string("bcde")
void reverse_string(char arr[])
{
	char tmp = arr[0];
	int len = strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] ='\0';
	if(strlen(arr+1)>=2)
	reverse_string(arr + 1);
	arr[len - 1] = tmp;

}
int main()
{
	char arr[] = "qwert";
	reverse_string(arr);
	printf("%s ", arr);
	return 0;
}




输入一个非负数返回组成他的数字之和
int Digitsum(unsigned int i)
{
	if (i > 9)
	{
		return Digitsum(i / 10) + i % 10;
	}
	else
	{
		return i;
	}
}
int main()
{
	unsigned int i = 0;
	scanf("%d", &i);
	int ret = Digitsum(i);
	printf("%d", ret);
	return 0;
}

n的k次方
//n*n^(k-1);




   qsort函数

typedef struct stu
{
	char name[20];
	int age;//不能限定个数
}Stu;
int cmp_age(const void* e1, const void* e2)
{
	return ((Stu*)e2)->name - ((Stu*)e1)->name;
}
void test()
{
	Stu s[4] = { {"zhangsan",90},{"lisi",50},{"wangwu",70} ,{"sun",10}};
	int se = sizeof(s) / sizeof(s[0]);
	qsort(s, se, sizeof(s[0]), cmp_age);
	

}
int main()
{
	test();
	return 0;
}

冒泡查找（回调函数）
void swap(char* arr,char* arr2, int widh)
{
	int i = 0;
	for (i = 0; i < widh; i++)
	{·
		int tmp = *arr;
		*arr = *arr2;
		*arr2 = tmp;
		arr++;
		arr2++;
	}

}
int cmp(const void* e1, const void* e2)
{
	return *(char*)e1 - *(char*)e2;
}
void bubble_sort(void*arr, int sz,int widh,int (*p)(void* e1,void* e2))
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (p((char*)arr + j * widh, (char*)arr + widh * (j + 1)) > 0)
			{
				swap((char*)arr + j * widh, (char*)arr + widh * (j + 1),widh);
			}
		}
	}

}
void test()
{
	char arr[9] = { 9,8,7,6,5,4,3,2,1};
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr,sz,sizeof(arr[0]),cmp);
	
}
int main()
{
	test();
	return 0;
}






面试题
int main()
{

	int a[3][2] = { (0,1), (2,3), (4,5)};//圆括号是逗号表达式

	int* p = a[0];
	printf("%d", p[0]);
	return 0;
}

计算求和
2+22+222+2222+..........;
int main()
{
	int a = 0;
	int n = 0;
	scanf("%d%d", &a, &n);
	int sum = 0;
	int i = 0;
	int ret = 0;
	for (i=0;i<n;i++)
	{
		ret = ret * 10 + a;
		sum += ret;
		printf("%d ", ret);
	}
	
	return 0;

}
打印水仙花数
#include<stdio.h>
#include<math.h>
int main()
{
	int i = 0;
	for (i = 0; i <=10000; i++)
	{
		int sum = 0;
		int n = 1;
		int tmp = i;
		while (tmp/= 10)
		{
			n++;
			
		}
		tmp = i;
		while (tmp)
		{
			sum += pow(tmp % 10, n);
			tmp /= 10;
		}
		if (i==sum)
		{
			printf("%d ", i);
		}
	}

	return 0;
}

打印菱形
int main()
{
	int line = 0;
	scanf("%d", &line);
	//上半部分
	int i = 0;
	for (i = 0; i < line; i++)
	{
		int j = 0;
		for (j = 0; j < line - i - 1; j++)
		{
			printf(" ");
		}
		for (j = 0; j < 2 * i + 1; j++)
		{
			printf("*");

		}
		printf("\n");
	}
	//下半部分
	for (i = 0; i < line - 1; i++)
	{
		int j = 0;
		for (j = 0; j <= i; j++)
		{
			printf(" ");
		}
		for (j = 0; j < 2 * (line - 1 - i) - 1; j++)
		{
			printf("*");
		}
		printf("\n");
	}
	return 0;
}



喝汽水问题一块钱买一瓶两个空瓶换一瓶汽水
nt main()
{
	int money = 0;
	scanf("%d", &money);
	int total = money;
	int empty = money; 
	while (empty >= 2)
	{
		total += empty / 2;
		empty = empty / 2 + empty % 2;
	}
	printf("%d ", total);
	return 0;
}


给一个数组前面全是偶数后面全是奇数
void swap(int*arr, int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left<right)
	{
		while ((left < right) && (arr[left] % 2 == 1))
		{
			left++;
		}
		while ((left < right) && (arr[right] % 2 == 0))
		{
			right--;
		}
		if (left < right)
		{
			int tmp = arr[left];
			arr[left] = arr[right];
			arr[right] = tmp;
		}
	}
}
void print(int* arr, int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	swap(arr, sz);
	
	print(arr,sz);
	return 0;
}


字符串交换
例如
asdfg；
fgasd；
暴力求解发
//void swap(char* arr,int ret,int i)
//{
//	int j = 0;
//	for (j = 0; j < i; j++)
//	{
//		char tmp = *arr;
//		int k = 0;
//		for (k = 0; k < ret - 1; k++)
//		{
//			*(arr + k) = *(arr + k + 1);
//
//		}
//		*(arr + ret - 1) = tmp;
//	}
//}



三部转换法
void reverss(char* left,char *right)
{
	while (left<right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}
void swap(char* arr, int ret, int i)
{
	assert(arr);
	assert(i <= ret);
	reverss(arr, arr + i - 1);
	reverss(arr + i, arr + ret - 1);
	reverss(arr, arr + ret - 1);
}
int is_lift_move(char* arr1, char* arr2)
{
	int len = strlen(arr1);
	int i = 0;
	for (i = 0; i < len; i++)
	{
		swap(arr1, len, 1);
		int ret = strcmp(arr1, arr2);
		if (ret == 0)
		{
			return 1;
		}

	}
	return 0;

}
int main()
{
	char arr1[] = "asdfg";
	char arr2[] = "fgasd";
	int ret = is_lift_move(arr1, arr2);
	if (ret == 1)
	{
		printf("yes\n");
	}
	else
	{
		printf("NO\n");
	}

	return 0;
}
方法2在后面打印一串自己再从中寻找
int is_swape(char* arr1, char* arr2)
{
	int len = strlen(arr1);
	int len1 = strlen(arr2);
	if (len != len1)
	{
		return 0;
	}
	strncat(arr1, arr1, len);
	char* ret = strstr(arr1, arr2);
		if (ret == NULL)
		{
			return 0;
		}
		else
		{
			return 1;
		}
}
int main()
{
	char arr1[22] = "asdfgh";
	char arr2[] = "asdfgh";
	int ret=is_swape(arr1,arr2);
	if (ret == 1)
	{
		printf("yse\n");
	}
	else
	{
		printf("no\n");
	}
	return 0;
}





杨氏矩阵
int FindNum(int arr[3][3], int* px, int*py, int k)
{
	int x = 0;
	int y = *py - 1;
	while (x <= *px - 1&&y>=0)
	{
		if (arr[x][y] > k)
		{
			y--;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			*px = x;
			*py = y;
			return 1;
		}
	}
	return  0;
}
int main()
{
	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 7;
	int x = 3;
	int y = 3;
	int ret = FindNum(arr,&x,&y,k);
	if (ret == 1)
	{
		printf("找到了\n");
		printf("下表是%d %d", x, y);
	}
	else
	{
		printf("找不到\n");
	}
	return 0;
}


